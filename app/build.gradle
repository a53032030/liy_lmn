apply plugin: 'com.android.application'
apply from: 'tinker-support.gradle'
android {
    signingConfigs {
        config {
            keyAlias 'lmn'
            keyPassword '123456'
            storeFile file('D:/keystore/liy_lmn.jks')
            storePassword '123456'
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId APPLICATION_ID
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        signingConfig signingConfigs.config
        ndk {
            //设置支持的SO库架构
            abiFilters 'armeabi' , 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }


    }
    buildTypes {
        release {
            minifyEnabled true   //开启混淆
            zipAlignEnabled true  //压缩优化
            shrinkResources true  //移出无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //默认的混淆文件以及我们指定的混淆文件
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
        }
    }


    productFlavors {
    }
    configurations.all {
        //循环一个个的依赖库
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            //获取当前循环到的依赖库
            def requested = details.requested
            //如果这个依赖库群组的名字是com.android.support
            if (requested.group == 'com.android.support') {
                //且其名字不是以multidex开头的
                if (!requested.name.startsWith("multidex")) {
                    //这里指定需要统一的依赖版本
                    details.useVersion '27.0.1'
                }
            }
        }
    }

}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.constraintVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation "junit:junit:$rootProject.junitVersion"
    implementation project(':lmnlibrary')
    compile "com.android.support:multidex:1.0.1" // 多dex配置
    //注释掉原有bugly的仓库
    //compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.3.4
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
    // 指定tinker依赖版本（注：应用升级1.3.5版本起，不再内置tinker）
    compile 'com.tencent.tinker:tinker-android-lib:latest.release'
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    compile "com.alibaba:arouter-api:$rootProject.arouterVersion"
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.arouterCompilerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$rootProject.daggerVersion"
    annotationProcessor "com.jakewharton:butterknife-compiler:8.4.0"
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.30'
    implementation 'com.android.support:cardview-v7:27.0.1'
    compile 'com.carson_ho:SearchLayout:1.0.1'
    compile 'com.alibaba:fastjson:1.1.70.android'

    //compile 'com.tencent.bugly:crashreport:latest.release'//其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.3.2
    compile 'com.tencent.bugly:crashreport_upgrade:latest.release'
//其中latest.release指代最新版本号，也可以指定明确的版本号，例如1.2.0
// 针对glide v3 版本：如果您的app中已经使用了glide，且glide版本号为3.x，仅需要依赖以下库：
    implementation 'com.github.SherlockGougou:BigImageViewPager:v3_1.2.8'
}
